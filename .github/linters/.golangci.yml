---
## Config for golangci-lint v2.0.2+
#
# This file is licensed under the terms of the MIT license https://opensource.org/license/mit
# Copyright (c) 2021-2025 Michael J Donahue
#
# Based on https://gist.github.com/maratori/47a4d00457a92aa426dbd48a18776322

version: "2"

# Linters configuration options.
linters:
  # The value can be: `standard`, `all`, `none`, or `fast`.
  # Default: standard
  default: none

  # Enable specific linter.
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    - asasalint  # checks for pass []any as any in variadic func(...any)
    - asciicheck  # checks that your code does not contain non-ASCII identifiers
    - bidichk  # checks for dangerous unicode character sequences
    - bodyclose  # checks whether HTTP response body is closed successfully
    - canonicalheader  # checks whether net/http.Header uses canonical header
    # - containedctx  # detects struct contained context.Context field
    # - contextcheck  # [too many false positives] checks the function whether use a non-inherited context
    - copyloopvar  # detects places where loop variables are copied (Go 1.22+)
    - cyclop  # checks function and package cyclomatic complexity
    - decorder  # checks declaration order and count of types, constants, variables and functions
    - depguard  # checks if package imports are in a list of acceptable packages
    # - dogsled  # checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dupl  # tool for code clone detection
    # - dupword  # [useless without config] checks for duplicate words in the source code
    - durationcheck  # checks for two durations multiplied together
    # - err113  # [too strict] checks the errors handling expressions
    - errcheck  # checking for unchecked errors, these unchecked errors can be critical bugs in some cases
    # - errchkjson  # [don't see profit + I'm against of omitting errors like in the first
    #   example https://github.com/breml/errchkjson] checks types passed to the json encoding
    #   functions. Reports unsupported types and optionally reports occasions, where the check for
    #   the returned error can be omitted
    - errname  # checks that sentinel errors are prefixed with the Err and error types are suffixed
    #   with the Error
    - errorlint  # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - exhaustive  # checks exhaustiveness of enum switch statements
    # - exhaustruct  # [highly recommend to enable] checks if all structure fields are initialized
    - exptostd  # detects functions from golang.org/x/exp/ that can be replaced by std functions
    - fatcontext  # detects nested contexts in loops
    # - forbidigo  # forbids identifiers
    # - forcetypeassert  # [replaced by errcheck] finds forced type assertions
    - funlen  # tool for detection of long functions
    - ginkgolinter  # [if you use ginkgo/gomega] enforces standards of using ginkgo and gomega
    - gocheckcompilerdirectives  # validates go compiler directive comments (//go:)
    - gochecknoglobals  # checks that no global variables exist
    - gochecknoinits  # checks that no init functions are present in Go code
    - gochecksumtype  # checks exhaustiveness on Go "sum types"
    - gocognit  # computes and checks the cognitive complexity of functions
    - goconst  # finds repeated strings that could be replaced by a constant
    - gocritic  # provides diagnostics that check for bugs, performance and style issues
    - gocyclo  # computes and checks the cyclomatic complexity of functions
    - godot  # checks if comments end in a period
    - godox  # detects usage of FIXME, TODO and other keywords inside comments
    # - goheader  # checks is file header matches to pattern
    - gomoddirectives  # manages the use of 'replace', 'retract', and 'excludes' directives in go.mod
    # - gomodguard  # [use more powerful depguard] allow and block lists linter for direct
    #   Go module dependencies
    - goprintffuncname  # checks that printf-like functions are named with f at the end
    - gosec  # inspects source code for security problems
    # - gosmopolitan # reports certain i18n/l10n anti-patterns in your Go codebase
    - govet  # reports suspicious constructs, such as Printf calls whose arguments do not
    #   align with the format string
    # - grouper  # analyzes expression groups
    - iface  # checks the incorrect use of interfaces, helping developers avoid interface pollution
    # - importas  # enforces consistent import aliases
    # - inamedparam  # [great idea, but too strict, need to ignore a lot of cases by default]
    #   reports interfaces with unnamed method parameters
    - ineffassign  # detects when assignments to existing variables are not used
    - interfacebloat # checks the number of methods inside an interface
    - intrange  # finds places where for loops could make use of an integer range
    - ireturn  # accept interfaces, return concrete types
    # - lll # [replaced by golines] reports long lines
    - loggercheck  # checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
    # - maintidx  # measures the maintainability index of each function
    - makezero  # finds slice declarations with non-zero initial length
    # - misspell  # [useless] finds commonly misspelled English words in comments
    # - mirror  # reports wrong mirror patterns of bytes/strings usage
    - mnd  # detects magic numbers
    - musttag  # enforces field tags in (un)marshaled structs
    - nakedret  # finds naked returns in functions greater than a specified function length
    - nestif  # reports deeply nested if statements
    - nilerr  # finds the code that returns nil even if it checks that the error is not nil
    - nilnesserr  # reports that it checks for err != nil, but it returns a different nil
    #   value error (powered by nilness and nilerr)
    - nilnil  # checks that there is no simultaneous return of nil error and an invalid value
    # - nlreturn  # [too strict and mostly code is not more readable] checks for
    #   a new line before return and branch statements to increase code clarity
    - noctx  # finds sending http request without context.Context
    - nolintlint  # reports ill-formed or insufficient nolint directives
    - nonamedreturns  # reports all named returns
    - nosprintfhostport  # checks for misuse of Sprintf to construct a host with port in a URL
    # - paralleltest  # [too many false positives] detects missing usage of t.Parallel()
    #   method in your Go test
    # - perfsprint  # checks that fmt.Sprintf can be replaced with a faster alternative
    # - prealloc  # [premature optimization, but can be used in some cases] finds
    #   slice declarations that could potentially be preallocated
    - predeclared  # finds code that shadows one of Go's predeclared identifiers
    - promlinter  # checks Prometheus metrics naming via promlint
    - protogetter  # reports direct reads from proto message fields when getters should be used
    - reassign  # checks that package variables are not reassigned
    - recvcheck  # checks for receiver type consistency
    - revive  # fast, configurable, extensible, flexible, and beautiful linter for Go,
    #   drop-in replacement of golint
    - rowserrcheck  # checks whether Err of rows is checked successfully
    - sloglint  # ensure consistent code style when using log/slog
    - spancheck  # checks for mistakes with OpenTelemetry/Census spans
    - sqlclosecheck  # checks that sql.Rows and sql.Stmt are closed
    # - staticcheck  # is a go vet on steroids, applying a ton of static analysis checks
    # - tagalign  # checks that struct tags are well aligned
    # - tagliatelle  # checks the struct tags
    - testableexamples  # checks if examples are testable (have an expected output)
    # - testifylint  # checks usage of github.com/stretchr/testify
    - testpackage  # makes you use a separate _test package
    # - thelper  # detects golang test helpers without t.Helper() call and checks the
    #   consistency of test helpers
    - tparallel  # detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert  # removes unnecessary type conversions
    - unparam  # reports unused function parameters
    - unused  # checks for unused constants, variables, functions and types
    - usestdlibvars  # detects the possibility to use variables/constants from the
    #   Go standard library
    - usetesting  # reports uses of functions with replacement inside the testing package
    - varnamelen  # [great idea, but too many false positives] checks that the
    #   length of a variable's name matches its scope
    - wastedassign  # finds wasted assignment statements
    - whitespace  # detects leading and trailing whitespace
    - wrapcheck  # checks that errors returned from external packages are wrapped
    # - wsl  # [too strict and mostly code is not more readable] whitespace linter
    #   forces you to use empty lines
    - zerologlint  # detects the wrong usage of zerolog that a user forgets to
    #   dispatch zerolog.Event

  # Disable specific linter
  # https://golangci-lint.run/usage/linters/#disabled-by-default
  # disable:


  # All settings can be found here
  #   https://github.com/golangci/golangci-lint/blob/HEAD/.golangci.reference.yml
  settings:
    cyclop:
      # The maximal code complexity to report.
      # Default: 10
      max-complexity: 30
      # The maximal average package complexity.
      # If it's higher than 0.0 (float) the check is enabled
      # Default: 0.0
      package-average: 10.0

    depguard:
      # Rules to apply.
      #
      # Variables:
      # - File Variables
      #   Use an exclamation mark `!` to negate a variable.
      #   Example: `!$test` matches any file that is not a go test file.
      #
      #   `$all` - matches all go files
      #   `$test` - matches all go test files
      #
      # - Package Variables
      #
      #   `$gostd` - matches all of go's standard library (Pulled from `GOROOT`)
      #
      # Default (applies if no custom rules are defined): Only allow $gostd in all files.
      rules:
        "deprecated":
          # List of file globs that will match this list of settings to compare against.
          # By default, if a path is relative, it is relative to the directory where the
          # golangci-lint command is executed.
          # The placeholder '${base-path}' is substituted with a path relative to the mode
          # defined with `run.relative-path-mode`.
          # Default: $all
          files:
            - "$all"
          # List of packages that are not allowed.
          # Entries can be a variable (starting with $), a string prefix, or an exact match (if ending with $).
          # Default: []
          deny:
            - pkg: github.com/golang/protobuf
              desc: Use google.golang.org/protobuf instead, see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules
            - pkg: github.com/satori/go.uuid
              desc: Use github.com/google/uuid instead, satori's package is not maintained
            - pkg: github.com/gofrs/uuid$
              desc: Use github.com/gofrs/uuid/v5 or later, it was not a go module before v5
        "non-test files":
          files:
            - "!$test"
          deny:
            - pkg: math/rand$
              desc: Use math/rand/v2 instead, see https://go.dev/blog/randv2
        "non-main files":
          files:
            - "!**/main.go"
          deny:
            - pkg: log$
              desc: Use log/slog instead, see https://go.dev/blog/slog

    errcheck:
      # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
      # Such cases aren't reported by default.
      # Default: false
      check-type-assertions: true

    exhaustive:
      # Program elements to check for exhaustiveness.
      # Default: [ switch ]
      check:
        - switch
        - map

    exhaustruct:
      # List of regular expressions to exclude struct packages and their names from checks.
      # Regular expressions must match complete canonical struct package/name/structname.
      # Default: []
      exclude:
        # std libs
        - ^net/http.Client$
        - ^net/http.Cookie$
        - ^net/http.Request$
        - ^net/http.Response$
        - ^net/http.Server$
        - ^net/http.Transport$
        - ^net/url.URL$
        - ^os/exec.Cmd$
        - ^reflect.StructField$
        # public libs
        - ^github.com/Shopify/sarama.Config$
        - ^github.com/Shopify/sarama.ProducerMessage$
        - ^github.com/mitchellh/mapstructure.DecoderConfig$
        - ^github.com/prometheus/client_golang/.+Opts$
        - ^github.com/spf13/cobra.Command$
        - ^github.com/spf13/cobra.CompletionOptions$
        - ^github.com/stretchr/testify/mock.Mock$
        - ^github.com/testcontainers/testcontainers-go.+Request$
        - ^github.com/testcontainers/testcontainers-go.FromDockerfile$
        - ^golang.org/x/tools/go/analysis.Analyzer$
        - ^google.golang.org/protobuf/.+Options$
        - ^gopkg.in/yaml.v3.Node$

    funlen:
      # Checks the number of lines in a function.
      # If lower than 0, disable the check.
      # Default: 60
      lines: 250
      # Checks the number of statements in a function.
      # If lower than 0, disable the check.
      # Default: 40
      statements: 150

    gochecksumtype:
      # Presence of `default` case in switch statements satisfies exhaustiveness,
      #   if all members are not listed.
      # Default: true
      default-signifies-exhaustive: false

    gocognit:
      # Minimal code complexity to report.
      # Default: 30 (but we recommend 10-20)
      min-complexity: 40

    gocritic:
      # Settings passed to gocritic.
      # The settings key is the name of a supported gocritic checker.
      # The list of supported checkers can be find in https://go-critic.github.io/overview.
      settings:
        captLocal:
          # Whether to restrict checker to params only.
          # Default: true
          paramsOnly: false
        underef:
          # Whether to skip (*x).method() calls where x is a pointer receiver.
          # Default: true
          skipRecvDeref: false

    govet:
      # Enable all analyzers.
      # Default: false
      enable-all: true
      # Disable analyzers by name.
      # Run `go tool vet help` to see all analyzers.
      # Default: []
      disable:
        - fieldalignment # too strict
      # Settings per analyzer.
      settings:
        shadow:
          # Whether to be strict about shadowing; can be noisy.
          # Default: false
          strict: true

    inamedparam:
      # Skips check for interface methods with only a single parameter.
      # Default: false
      skip-single-param: true

    mnd:
      # List of function patterns to exclude from analysis.
      # Values always ignored: `time.Date`,
      # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
      # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
      # Default: []
      ignored-functions:
        - args.Error
        - flag.Arg
        - flag.Duration.*
        - flag.Float.*
        - flag.Int.*
        - flag.Uint.*
        - os.Chmod
        - os.Mkdir.*
        - os.OpenFile
        - os.WriteFile
        - prometheus.ExponentialBuckets.*
        - prometheus.LinearBuckets

    nakedret:
      # Make an issue if func has more lines of code than this setting, and it has naked returns.
      # Default: 30
      max-func-lines: 0

    nestif:
      # Minimal complexity of if statements to report.
      # Default: 5
      min-complexity: 8

    nolintlint:
      # Exclude following linters from requiring an explanation.
      # Default: []
      allow-no-explanation: [ funlen, gocognit, golines ]
      # Enable to require an explanation of nonzero length after each nolint directive.
      # Default: false
      require-explanation: true
      # Enable to require nolint directives to mention the specific linter being suppressed.
      # Default: false
      require-specific: true

    perfsprint:
      # Optimizes into strings concatenation.
      # Default: true
      strconcat: false

    reassign:
      # Patterns for global variable names that are checked for reassignment.
      # See https://github.com/curioswitch/go-reassign#usage
      # Default: ["EOF", "Err.*"]
      patterns:
        - ".*"

    rowserrcheck:
      # database/sql is always checked
      # Default: []
      packages:
        - github.com/jmoiron/sqlx

    sloglint:
      # Enforce not using global loggers.
      # Values:
      # - "": disabled
      # - "all": report all global loggers
      # - "default": report only the default slog logger
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-global
      # Default: ""
      no-global: all
      # Enforce using methods that accept a context.
      # Values:
      # - "": disabled
      # - "all": report all contextless calls
      # - "scope": report only if a context exists in the scope of the outermost function
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#context-only
      # Default: ""
      context: scope

    staticcheck:
      # SAxxxx checks in https://staticcheck.dev/docs/configuration/options/#checks
      # Example (to disable some checks): [ "all", "-SA1000", "-SA1001"]
      # Default: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
      checks:
        - all
        # Incorrect or missing package comment.
        # https://staticcheck.dev/docs/checks/#ST1000
        - -ST1000
        # Use consistent method receiver names.
        # https://staticcheck.dev/docs/checks/#ST1016
        - -ST1016
        # Omit embedded fields from selector expression.
        # https://staticcheck.dev/docs/checks/#QF1008
        - -QF1008

    usetesting:
      # Enable/disable `os.TempDir()` detections.
      # Default: false
      os-temp-dir: true

  exclusions:
    # Mode of the generated files analysis.
    #
    # - `strict`: sources are excluded by strictly following the Go generated file convention.
    #    Source files that have lines matching only the following regular expression will
    #    be excluded: `^// Code generated .* DO NOT EDIT\.$`
    #    This line must appear before the first non-comment, non-blank text in the file.
    #    https://go.dev/s/generatedcode
    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`,
    #    `do not edit`, etc.
    # - `disable`: disable the generated files exclusion.
    #
    # Default: lax
    generated: strict
    # Log a warning if an exclusion rule is unused.
    # Default: false
    warn-unused: true
    # Predefined exclusion rules.
    # Default: []
    presets:
      - comments
      - std-error-handling
      - common-false-positives
      - legacy
    # Excluding configuration per-path, per-linter, per-text and per-source.
    rules:
      - source: "^//\\s*go:generate\\s"
        linters: [ lll ]
      - source: 'TODO'
        linters: [ godot ]
      - text: 'should have a package comment'
        linters: [ revive ]
      - text: 'exported \S+ \S+ should have comment( \(or a comment on this block\))? or be unexported'
        linters: [ revive ]
      - text: 'package comment should be of the form ".+"'
        source: '// ?(nolint|TODO)'
        linters: [ revive ]
      - text: 'comment on exported \S+ \S+ should be of the form ".+"'
        source: '// ?(nolint|TODO)'
        linters: [ revive, staticcheck ]
      - path: '_test\.go'
        linters:
          - bodyclose
          - dupl
          - errcheck
          - exhaustruct
          - funlen
          - goconst
          - gocyclo
          - golines
          - gosec
          - noctx
          - reassign
          - revive
          - wrapcheck

# Formatters configuration options.
formatters:
  enable:
    - gci  # checks if code and import statements are formatted, with additional rules
    - gofmt  # checks if the code is formatted according to 'gofmt' command
    - goimports  # checks if the code and import statements are formatted according to the 'goimports' command
    - golines  # checks if code is formatted, and fixes long lines

    ## disabled
    # - gofumpt  # [replaced by goimports, gofumports is not available yet] checks if code and import
    #   statements are formatted, with additional rules

  # Formatters settings.
  settings:
    gci:
      # Section configuration to compare against.
      # Section names are case-insensitive and may contain parameters in ().
      # The default order of sections is `standard > default > custom > blank > dot > alias > localmodule`,
      # If `custom-order` is `true`, it follows the order of `sections` option.
      # Default: ["standard", "default"]
      sections:
        - standard                       # Standard section: captures all standard packages.
        - default                        # Default section: contains all imports that could not be matched to another section type.
      #  - prefix(github.com/org/project) # Custom section: groups all imports with the specified Prefix.
      #  - blank                          # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      #  - dot                            # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
      #  - alias                          # Alias section: contains all alias imports. This section is not present unless explicitly enabled.
      #  - localmodule                    # Local module section: contains all local packages. This section is not present unless explicitly enabled.

      # Checks that no inline comments are present.
      # Default: false
      # no-inline-comments: true

      # Checks that no prefix comments (comment lines above an import) are present.
      # Default: false
      # no-prefix-comments: true

      # Enable custom order of sections.
      # If `true`, make the section order the same as the order of `sections`.
      # Default: false
      # custom-order: true

      # Drops lexical ordering for custom sections.
      # Default: false
      # no-lex-order: true

    gofmt:
      # Simplify code: gofmt with `-s` option.
      # Default: true
      simplify: false

      # Apply the rewrite rules to the source before reformatting.
      # https://pkg.go.dev/cmd/gofmt
      # Default: []
      # rewrite-rules:
      #  - pattern: 'interface{}'
      #    replacement: 'any'
      #  - pattern: 'a[b:len(a)]'
      #    replacement: 'a[b:]'

    # gofumpt:
      # Module path which contains the source code being formatted.
      # Default: ""
      # module-path: github.com/org/project

      # Choose whether to use the extra rules.
      # Default: false
      # extra-rules: true

    # goimports:
      # A list of prefixes, which, if set, checks import paths
      # with the given prefixes are grouped after 3rd-party packages.
      # Default: []
      # local-prefixes:
      #   - github.com/org/project

    golines:
      # Target maximum line length.
      # Default: 100
      max-len: 135

      # Length of a tabulation.
      # Default: 4
      tab-len: 4

      # Shorten single-line comments.
      # Default: false
      # shorten-comments: true

      # Default: true
      reformat-tags: false

      # Split chained methods on the dots as opposed to the arguments.
      # Default: true
      chain-split-dots: false


# Issues configuration options.
issues:
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 50

  # Make issues output unique by line.
  # Default: true
  # uniq-by-line: false

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false
  # new: true

  # Show only new issues created after the best common ancestor (merge-base against HEAD).
  # Default: ""
  # new-from-merge-base: main

  # Show only new issues created after git revision `REV`.
  # Default: ""
  # new-from-rev: HEAD

  # Show only new issues created in git patch with set file path.
  # Default: ""
  # new-from-patch: path/to/patch/file

  # Show issues in any part of update files (requires new-from-rev or new-from-patch).
  # Default: false
  whole-files: false

  # Fix found issues (if it's supported by the linter).
  # Default: false
  # fix: true

# Output configuration options.
output:
  # The formats used to render issues.
  formats:
    # Prints issues in a text format with colors, line number, and linter name.
    # This format is the default format.
    text:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.txt

      # Print linter name in the end of issue text.
      # Default: true
      print-linter-name: true

      # Print lines of code with issue.
      # Default: true
      print-issued-lines: true

      # Use colors.
      # Default: true
      # colors: false

    # Prints issues in a JSON representation.
    # json:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.json

    # Prints issues in columns representation separated by tabulations.
    tab:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.txt

      # Print linter name in the end of issue text.
      # Default: true
      print-linter-name: true

      # Use colors.
      # Default: true
      # colors: false

    # Prints issues in an HTML page.
    # It uses the Cloudflare CDN (cdnjs) and React.
    # html:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.html

    # Prints issues in the Checkstyle format.
    # checkstyle:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.xml

    # Prints issues in the Code Climate format.
    # code-climate:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.json

    # Prints issues in the JUnit XML format.
    junit-xml:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.xml

      # Support extra JUnit XML fields.
      # Default: false
      extended: true

    # Prints issues in the TeamCity format.
    # teamcity:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.txt

    # Prints issues in the SARIF format.
    # sarif:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.json

  # Add a prefix to the output file references.
  # Default: ""
  path-prefix: ""

  # Order to use when sorting results.
  # Possible values: `file`, `linter`, and `severity`.
  #
  # If the severity values are inside the following list, they are ordered in this order:
  #   1. error
  #   2. warning
  #   3. high
  #   4. medium
  #   5. low
  # Either they are sorted alphabetically.
  #
  # Default: ["linter", "file"]
  sort-order:
    - linter
    - severity
    - file # filepath, line, and column.

  # Show statistics per linter.
  # Default: true
  show-stats: true

# Options for analysis running.
run:
  # Timeout for total work, e.g. 30s, 5m, 5m30s.
  # If the value is lower or equal to 0, the timeout is disabled.
  # Default: 0 (disabled)
  timeout: 5m

  # The mode used to evaluate relative paths.
  # It's used by exclusions, Go plugins, and some linters.
  # The value can be:
  # - `gomod`: the paths will be relative to the directory of the `go.mod` file.
  # - `gitroot`: the paths will be relative to the git root (the parent directory of `.git`).
  # - `cfg`: the paths will be relative to the configuration file.
  # - `wd` (NOT recommended): the paths will be relative to the place where golangci-lint is run.
  # Default: cfg
  relative-path-mode: gomod

  # Exit code when at least one issue was found.
  # Default: 1
  # issues-exit-code: 2

  # Include test files or not.
  # Default: true
  # tests: false

  # List of build tags, all linters use it.
  # Default: []
  # build-tags:
  #  - mytag

  # If set, we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # Default: ""
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false, golangci-lint acquires file lock on start.
  # Default: false
  allow-parallel-runners: true

  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  allow-serial-runners: true

  # Define the Go version limit.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.22.
  # go: '1.23'

  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.
  # Default: 0 (automatically set to match Linux container CPU quota and
  # fall back to the number of logical CPUs in the machine)
  concurrency: 4

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Default: ""
  default: error
  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  # rules:
  #   - linters:
  #      - dupl
  #    severity: info
